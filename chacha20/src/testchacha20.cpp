#include "chacha20-core.hpp"
#include "aead_chacha20_poly1305-core.hpp"

bool testRound() {
    chacha_state state;
    state[0] = 0x11111111;
    state[1] = 0x01020304;
    state[2] = 0x9b8d6f43;
    state[3] = 0x01234567;
    
    QUARTERROUND(state, 0, 1, 2, 3);

    if (state[0] != 0xea2a92f4 ||
        state[1] != 0xcb1cf8ce ||
        state[2] != 0x4581472e ||
        state[3] != 0x5881c4bb) {
        std::cout << "TestRound failed." << std::endl;
        return false;
    }
    return true;
}

bool testChachaRound() {
    chacha_state state;
    int i =0;

    state[i++] = 0x879531e0;  
    state[i++] = 0xc5ecf37d;  
    state[i++] = 0x516461b1;  
    state[i++] = 0xc9a62f8a;
    state[i++] = 0x44c20ef3;  
    state[i++] = 0x3390af7f;  
    state[i++] = 0xd9fc690b;  
    state[i++] = 0x2a5f714c;
    state[i++] = 0x53372767;  
    state[i++] = 0xb00a5631;  
    state[i++] = 0x974c541a;  
    state[i++] = 0x359e9963;
    state[i++] = 0x5c971061;  
    state[i++] = 0x3d631689;  
    state[i++] = 0x2098d9d6;  
    state[i++] = 0x91dbd320;

    QUARTERROUND(state, 2, 7, 8, 13);

    if (state[0]  != 0x879531e0 ||
        state[1]  != 0xc5ecf37d || 
        state[2]  != 0xbdb886dc || 
        state[3]  != 0xc9a62f8a ||
        state[4]  != 0x44c20ef3 || 
        state[5]  != 0x3390af7f || 
        state[6]  != 0xd9fc690b || 
        state[7]  != 0xcfacafd2 ||
        state[8]  != 0xe46bea80 || 
        state[9]  != 0xb00a5631 || 
        state[10] != 0x974c541a || 
        state[11] != 0x359e9963 ||
        state[12] != 0x5c971061 || 
        state[13] != 0xccc07c79 || 
        state[14] != 0x2098d9d6 || 
        state[15] != 0x91dbd320) {
        std::cout << "TestChachaRound failed." << std::endl;
        return false;
    }
    return true;
}

bool testChacha20_block() {
    key key;
    for (int i = 0; i < 32; ++i) key[i] = i;
    nonce nonce;
    nonce[0] = 0x09000000;
    nonce[1] = 0x4a000000;
    nonce[2] = 0;
    counter counter = 1;
    keystream output;
    keystream expected = {0x10, 0xf1, 0xe7, 0xe4, 0xd1, 0x3b, 0x59, 0x15, 0x50, 0x0f, 0xdd, 0x1f, 0xa3, 0x20, 0x71, 0xc4, 0xc7, 0xd1, 0xf4, 0xc7, 0x33, 0xc0, 0x68, 0x03, 0x04, 0x22, 0xaa, 0x9a, 0xc3, 0xd4, 0x6c, 0x4e, 0xd2, 0x82, 0x64, 0x46, 0x07, 0x9f, 0xaa, 0x09, 0x14, 0xc2, 0xd7, 0x05, 0xd9, 0x8b, 0x02, 0xa2, 0xb5, 0x12, 0x9c, 0xd1, 0xde, 0x16, 0x4e, 0xb9, 0xcb, 0xd0, 0x83, 0xe8, 0xa2, 0x50, 0x3c, 0x4e};
    chacha20_block(key, nonce, counter, output);

    for (int i = 0; i < 64; ++i) {
        // std::cout << std::hex << std::setw(2) << std::setfill('0') << (int)(output[i]) << ":";
        if (output[i] != expected[i]) {
            std::cout << "testChacha20_block failed." << std::endl;
            return false;
        }
    }
     
    return true;
}

bool testChacha20_encrypt() {
    key key;
    for (int i = 0; i < 32; ++i) key[i] = i;
    nonce nonce;
    nonce[0] = 0x00000000;
    nonce[1] = 0x4a000000;
    nonce[2] = 0;
    counter counter = 1;
    uint8_t message[114] = {0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39, 0x3a, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x69, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69, 0x74, 0x2e};
    int message_size = sizeof(message) / sizeof(message[0]);
    uint8_t expected_cipher[114] = {0x6e, 0x2e, 0x35, 0x9a, 0x25, 0x68, 0xf9, 0x80, 0x41, 0xba, 0x07, 0x28, 0xdd, 0x0d, 0x69, 0x81, 0xe9, 0x7e, 0x7a, 0xec, 0x1d, 0x43, 0x60, 0xc2, 0x0a, 0x27, 0xaf, 0xcc, 0xfd, 0x9f, 0xae, 0x0b, 0xf9, 0x1b, 0x65, 0xc5, 0x52, 0x47, 0x33, 0xab, 0x8f, 0x59, 0x3d, 0xab, 0xcd, 0x62, 0xb3, 0x57, 0x16, 0x39, 0xd6, 0x24, 0xe6, 0x51, 0x52, 0xab, 0x8f, 0x53, 0x0c, 0x35, 0x9f, 0x08, 0x61, 0xd8, 0x07, 0xca, 0x0d, 0xbf, 0x50, 0x0d, 0x6a, 0x61, 0x56, 0xa3, 0x8e, 0x08, 0x8a, 0x22, 0xb6, 0x5e, 0x52, 0xbc, 0x51, 0x4d, 0x16, 0xcc, 0xf8, 0x06, 0x81, 0x8c, 0xe9, 0x1a, 0xb7, 0x79, 0x37, 0x36, 0x5a, 0xf9, 0x0b, 0xbf, 0x74, 0xa3, 0x5b, 0xe6, 0xb4, 0x0b, 0x8e, 0xed, 0xf2, 0x78, 0x5e, 0x42, 0x87, 0x4d };
    uint8_t cipher[114];

    chacha20_encrypt(key, counter, nonce, message, message_size, cipher);

    for (int i = 0; i < 114; ++i) {
        if (cipher[i] != expected_cipher[i]) {
            std::cout << "testChacha20_encrypt failed." << std::endl;
            return false;
        }
    }

    return true;
}

bool testAEAD() {
    uint8_t plaintext[] = {0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39, 0x3a, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x69, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69, 0x74, 0x2e};
    uint8_t AAD[] = {0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7};
    key key = {0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f};
    nonce nonce = {0x00000007, 0x43424140, 0x47464544};
    
    uint8_t *ciphertext;
    uint8_t *AEAD;
    uint64_t AEAD_size;
    uint8_t tag[16];

    generateAEAD(key, nonce, plaintext, 114, AAD, 12, ciphertext, AEAD, AEAD_size, tag);

    uint8_t expected_ciphertext[] = {0xd3, 0x1a, 0x8d, 0x34, 0x64, 0x8e, 0x60, 0xdb, 0x7b, 0x86, 0xaf, 0xbc, 0x53, 0xef, 0x7e, 0xc2, 0xa4, 0xad, 0xed, 0x51, 0x29, 0x6e, 0x08, 0xfe, 0xa9, 0xe2, 0xb5, 0xa7, 0x36, 0xee, 0x62, 0xd6, 0x3d, 0xbe, 0xa4, 0x5e, 0x8c, 0xa9, 0x67, 0x12, 0x82, 0xfa, 0xfb, 0x69, 0xda, 0x92, 0x72, 0x8b, 0x1a, 0x71, 0xde, 0x0a, 0x9e, 0x06, 0x0b, 0x29, 0x05, 0xd6, 0xa5, 0xb6, 0x7e, 0xcd, 0x3b, 0x36, 0x92, 0xdd, 0xbd, 0x7f, 0x2d, 0x77, 0x8b, 0x8c, 0x98, 0x03, 0xae, 0xe3, 0x28, 0x09, 0x1b, 0x58, 0xfa, 0xb3, 0x24, 0xe4, 0xfa, 0xd6, 0x75, 0x94, 0x55, 0x85, 0x80, 0x8b, 0x48, 0x31, 0xd7, 0xbc, 0x3f, 0xf4, 0xde, 0xf0, 0x8e, 0x4b, 0x7a, 0x9d, 0xe5, 0x76, 0xd2, 0x65, 0x86, 0xce, 0xc6, 0x4b, 0x61, 0x16};
    uint8_t expected_AEAD[] = {0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0x00, 0x00, 0x00, 0x00, 0xd3, 0x1a, 0x8d, 0x34, 0x64, 0x8e, 0x60, 0xdb, 0x7b, 0x86, 0xaf, 0xbc, 0x53, 0xef, 0x7e, 0xc2, 0xa4, 0xad, 0xed, 0x51, 0x29, 0x6e, 0x08, 0xfe, 0xa9, 0xe2, 0xb5, 0xa7, 0x36, 0xee, 0x62, 0xd6, 0x3d, 0xbe, 0xa4, 0x5e, 0x8c, 0xa9, 0x67, 0x12, 0x82, 0xfa, 0xfb, 0x69, 0xda, 0x92, 0x72, 0x8b, 0x1a, 0x71, 0xde, 0x0a, 0x9e, 0x06, 0x0b, 0x29, 0x05, 0xd6, 0xa5, 0xb6, 0x7e, 0xcd, 0x3b, 0x36, 0x92, 0xdd, 0xbd, 0x7f, 0x2d, 0x77, 0x8b, 0x8c, 0x98, 0x03, 0xae, 0xe3, 0x28, 0x09, 0x1b, 0x58, 0xfa, 0xb3, 0x24, 0xe4, 0xfa, 0xd6, 0x75, 0x94, 0x55, 0x85, 0x80, 0x8b, 0x48, 0x31, 0xd7, 0xbc, 0x3f, 0xf4, 0xde, 0xf0, 0x8e, 0x4b, 0x7a, 0x9d, 0xe5, 0x76, 0xd2, 0x65, 0x86, 0xce, 0xc6, 0x4b, 0x61, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    uint8_t expected_tag[] = {0x1a, 0xe1, 0x0b, 0x59, 0x4f, 0x09, 0xe2, 0x6a, 0x7e, 0x90, 0x2e, 0xcb, 0xd0, 0x60, 0x06, 0x91};

    for (int i = 0; i < 114; ++i) {
        if (ciphertext[i] != expected_ciphertext[i]) {
            std::cout << "cipher" << i << std::endl;
            std::cout << std::hex << std::setfill('0') << std::setw(2) << (int)ciphertext[i] << std::endl;
            std::cout << std::hex << std::setfill('0') << std::setw(2) << (int)expected_ciphertext[i] << std::endl;
            std::cout << "testAEAD failed." << std::endl;
            return false;
        }
    }
    for (int i = 0; i < 160; ++i) {
        if (AEAD[i] != expected_AEAD[i]) {
            std::cout << "AEAD" << i << std::endl;
            std::cout << std::hex << std::setfill('0') << std::setw(2) << (int)AEAD[i] << std::endl;
            std::cout << std::hex << std::setfill('0') << std::setw(2) << (int)expected_AEAD[i] << std::endl;
            std::cout << "testAEAD failed." << std::endl;
            return false;
        }
    }
    for (int i = 0; i < 16; ++i) {
        if (tag[i] != expected_tag[i]) {
            std::cout << "tag" << i << std::endl;
            std::cout << std::hex << std::setfill('0') << std::setw(2) << (int)tag[i] << std::endl;
            std::cout << std::hex << std::setfill('0') << std::setw(2) << (int)expected_tag[i] << std::endl;
            std::cout << "testAEAD failed." << std::endl;
            return false;
        }
    }

    delete[] ciphertext;
    delete[] AEAD;
    return true;
}

bool testkeygen() {
    key inkey = {0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f};
    nonce nonce = {0x00000000, 0x03020100, 0x07060504};
    keystream outkey;
    key expected_outkey = {0x8a , 0xd5 , 0xa0 , 0x8b , 0x90 , 0x5f , 0x81 , 0xcc , 0x81 , 0x50 , 0x40 , 0x27 , 0x4a , 0xb2 , 0x94 , 0x71 , 0xa8 , 0x33 , 0xb6 , 0x37 , 0xe3 , 0xfd , 0x0d , 0xa5 , 0x08 , 0xdb , 0xb8 , 0xe2 , 0xfd , 0xd1 , 0xa6 , 0x46};
    poly1305_key_gen(inkey, nonce, outkey);

    for (int i = 0; i < 32; ++i) {
        if (outkey[i] != expected_outkey[i]) {
            std::cout << "testkeygen failed." << std::endl;
            return false;
        }
    }
    return true;
}

int main(/*int argc, char const *argv[]*/) {
    if ( !(testRound() && testChachaRound() && testChacha20_block() && testChacha20_encrypt()) ) {
        return 1;
    }

    if ( !(testAEAD() && testkeygen()) ) {
        return 1;
    }

    std::cout << "All tests passed." << std::endl;

    return 0;
}