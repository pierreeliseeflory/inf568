#include "poly1305-core.hpp"
#include "chacha20-core.hpp"
#include <string>
#include <cstring>

void poly1305_key_gen(key key, nonce nonce, keystream out) {
    counter counter = 0;
    chacha20_block(key, nonce, counter, out); 

}

void generateAEAD(key key, nonce nonce, uint8_t plaintext[], uint64_t message_size, uint8_t AAD[], uint64_t AAD_size, uint8_t*& ciphertext, uint8_t*& data, uint8_t tag[]) {
    keystream poly1305_key;
    poly1305_key_gen(key, nonce, poly1305_key);

    // chacha
    ciphertext = new uint8_t[message_size];

    chacha20_encrypt(key, 1, nonce, plaintext, message_size, ciphertext);

    // poly1305
    int padding1 = (AAD_size % 16 == 0) ? 0 : 16 - (AAD_size % 16);
    int padding2 = (message_size % 16 == 0) ? 0 : 16 - (message_size % 16);

    int AEAD_size = AAD_size + padding1 + message_size + padding2 + 16;

    data = new uint8_t[AEAD_size];

    int byte = 0;
    for (uint64_t i = 0; i < AAD_size; ++i)
        data[byte++] = AAD[i];
    for (int i = 0; i < padding1; ++i)
        data[byte++] = 0;
    for (uint64_t i = 0; i < message_size; ++i)
        data[byte++] = ciphertext[i];
    for (int i = 0; i < padding2; ++i)
        data[byte++] = 0;
    for (int i = 0; i < 8; ++i) {
        data[byte++] = AAD_size & 0xff;
        AAD_size = AAD_size >> 8;
    }
    uint64_t tmp = message_size;
    for (int i = 0; i < 8; ++i) {
        data[byte++] = tmp & 0xff;
        tmp = tmp >> 8;
    }

    poly1305_chacha_key(poly1305_key, data, AEAD_size, tag);

    std::cout << "Ciphertext:" << std::endl;
    for (unsigned int i = 0; i < message_size; ++i) {
        std::cout << std::hex << std::setfill('0') << std::setw(2) << (int)plaintext[i] << " ";
    }
    std::cout << std::endl;

    std::cout << "AEAD:" << std::endl;
    for (int i = 0; i < AEAD_size; ++i) {
        std::cout << std::hex << std::setfill('0') << std::setw(2) << (int)data[i] << " ";
    }
    std::cout << std::endl;

    std::cout << "Tag:" << std::endl;
    for (int i = 0; i < 16; ++i) {
        std::cout << std::hex << std::setfill('0') << std::setw(2) << (int)tag[i] << " ";
    }
    std::cout << std::endl;
}

bool testAEAD() {
    uint8_t plaintext[] = {0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39, 0x3a, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x69, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69, 0x74, 0x2e};
    uint8_t AAD[] = {0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7};
    key key = {0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f};
    nonce nonce = {0x00000007, 0x43424140, 0x47464544};
    
    uint8_t *ciphertext;
    uint8_t *AEAD;
    uint8_t tag[16];

    generateAEAD(key, nonce, plaintext, 114, AAD, 12, ciphertext, AEAD, tag);

    uint8_t expected_ciphertext[] = {0xd3, 0x1a, 0x8d, 0x34, 0x64, 0x8e, 0x60, 0xdb, 0x7b, 0x86, 0xaf, 0xbc, 0x53, 0xef, 0x7e, 0xc2, 0xa4, 0xad, 0xed, 0x51, 0x29, 0x6e, 0x08, 0xfe, 0xa9, 0xe2, 0xb5, 0xa7, 0x36, 0xee, 0x62, 0xd6, 0x3d, 0xbe, 0xa4, 0x5e, 0x8c, 0xa9, 0x67, 0x12, 0x82, 0xfa, 0xfb, 0x69, 0xda, 0x92, 0x72, 0x8b, 0x1a, 0x71, 0xde, 0x0a, 0x9e, 0x06, 0x0b, 0x29, 0x05, 0xd6, 0xa5, 0xb6, 0x7e, 0xcd, 0x3b, 0x36, 0x92, 0xdd, 0xbd, 0x7f, 0x2d, 0x77, 0x8b, 0x8c, 0x98, 0x03, 0xae, 0xe3, 0x28, 0x09, 0x1b, 0x58, 0xfa, 0xb3, 0x24, 0xe4, 0xfa, 0xd6, 0x75, 0x94, 0x55, 0x85, 0x80, 0x8b, 0x48, 0x31, 0xd7, 0xbc, 0x3f, 0xf4, 0xde, 0xf0, 0x8e, 0x4b, 0x7a, 0x9d, 0xe5, 0x76, 0xd2, 0x65, 0x86, 0xce, 0xc6, 0x4b, 0x61, 0x16};
    uint8_t expected_AEAD[] = {0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0x00, 0x00, 0x00, 0x00, 0xd3, 0x1a, 0x8d, 0x34, 0x64, 0x8e, 0x60, 0xdb, 0x7b, 0x86, 0xaf, 0xbc, 0x53, 0xef, 0x7e, 0xc2, 0xa4, 0xad, 0xed, 0x51, 0x29, 0x6e, 0x08, 0xfe, 0xa9, 0xe2, 0xb5, 0xa7, 0x36, 0xee, 0x62, 0xd6, 0x3d, 0xbe, 0xa4, 0x5e, 0x8c, 0xa9, 0x67, 0x12, 0x82, 0xfa, 0xfb, 0x69, 0xda, 0x92, 0x72, 0x8b, 0x1a, 0x71, 0xde, 0x0a, 0x9e, 0x06, 0x0b, 0x29, 0x05, 0xd6, 0xa5, 0xb6, 0x7e, 0xcd, 0x3b, 0x36, 0x92, 0xdd, 0xbd, 0x7f, 0x2d, 0x77, 0x8b, 0x8c, 0x98, 0x03, 0xae, 0xe3, 0x28, 0x09, 0x1b, 0x58, 0xfa, 0xb3, 0x24, 0xe4, 0xfa, 0xd6, 0x75, 0x94, 0x55, 0x85, 0x80, 0x8b, 0x48, 0x31, 0xd7, 0xbc, 0x3f, 0xf4, 0xde, 0xf0, 0x8e, 0x4b, 0x7a, 0x9d, 0xe5, 0x76, 0xd2, 0x65, 0x86, 0xce, 0xc6, 0x4b, 0x61, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    uint8_t expected_tag[] = {0x1a, 0xe1, 0x0b, 0x59, 0x4f, 0x09, 0xe2, 0x6a, 0x7e, 0x90, 0x2e, 0xcb, 0xd0, 0x60, 0x06, 0x91};

    for (int i = 0; i < 114; ++i) {
        if (ciphertext[i] != expected_ciphertext[i]) {
            std::cout << "cipher" << i << std::endl;
            std::cout << std::hex << std::setfill('0') << std::setw(2) << (int)ciphertext[i] << std::endl;
            std::cout << std::hex << std::setfill('0') << std::setw(2) << (int)expected_ciphertext[i] << std::endl;
            std::cout << "testAEAD failed." << std::endl;
            return false;
        }
    }
    for (int i = 0; i < 160; ++i) {
        if (AEAD[i] != expected_AEAD[i]) {
            std::cout << "AEAD" << i << std::endl;
            std::cout << std::hex << std::setfill('0') << std::setw(2) << (int)AEAD[i] << std::endl;
            std::cout << std::hex << std::setfill('0') << std::setw(2) << (int)expected_AEAD[i] << std::endl;
            std::cout << "testAEAD failed." << std::endl;
            return false;
        }
    }
    for (int i = 0; i < 16; ++i) {
        if (tag[i] != expected_tag[i]) {
            std::cout << "tag" << i << std::endl;
            std::cout << std::hex << std::setfill('0') << std::setw(2) << (int)tag[i] << std::endl;
            std::cout << std::hex << std::setfill('0') << std::setw(2) << (int)expected_tag[i] << std::endl;
            std::cout << "testAEAD failed." << std::endl;
            return false;
        }
    }

    delete[] ciphertext;
    delete[] AEAD;
    return true;
}

bool testkeygen() {
    key inkey = {0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f};
    nonce nonce = {0x00000000, 0x03020100, 0x07060504};
    keystream outkey;
    key expected_outkey = {0x8a , 0xd5 , 0xa0 , 0x8b , 0x90 , 0x5f , 0x81 , 0xcc , 0x81 , 0x50 , 0x40 , 0x27 , 0x4a , 0xb2 , 0x94 , 0x71 , 0xa8 , 0x33 , 0xb6 , 0x37 , 0xe3 , 0xfd , 0x0d , 0xa5 , 0x08 , 0xdb , 0xb8 , 0xe2 , 0xfd , 0xd1 , 0xa6 , 0x46};
    poly1305_key_gen(inkey, nonce, outkey);

    for (int i = 0; i < 32; ++i) {
        if (outkey[i] != expected_outkey[i]) {
            std::cout << "testkeygen failed." << std::endl;
            return false;
        }
    }
    return true;
}

int main(int argc, char const *argv[])
{
     if (argc < 3) {
        std::cout << "Usage : " << argv[0] << " key nonce" << std::endl;
        return 1;
    }

    if (strlen(argv[1]) != 64) {
        std::cout << "The key must be 64 hexadecimal characters long." << std::endl;
        return 1;
    }

    if (strlen(argv[2]) != 24) {
        std::cout << "The nonce must be 64 hexadecimal characters long." << std::endl;
        return 1;
    }

    std::string line;
    std::getline(std::cin, line);
    int plaintext_size = line.size();

    uint8_t *plaintext = new uint8_t[plaintext_size];

    for (int i = 0; i < plaintext_size; ++i) {
        plaintext[i] = (uint8_t)line[i];
    }

    uint8_t AAD[] = { 0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7 };

    key key;
    nonce nonce;
   
    uint8_t *ciphertext;
    uint8_t *AEAD;
    uint8_t tag[16];

    std::string keyString(argv[1]);
    std::string nonceString(argv[2]);
    std::string hexa;

    for (int j = 0; j < 32; ++j) {
        hexa = keyString.substr(2*j, 2);
        key[j] = (uint8_t)std::stoi(hexa, 0, 16);
    }

    for (int j = 0; j < 3; ++j) {
        uint32_t tmp = 0;
        for (int i = 0; i < 4; ++i) {
            hexa = nonceString.substr(2*(4*j + i), 2);
            tmp += (uint32_t)std::stoi(hexa, 0, 16) << 8*i;
        }
        nonce[j] = tmp;
    }
    generateAEAD(key, nonce, plaintext, plaintext_size, AAD, 12, ciphertext, AEAD, tag);

    delete [] plaintext;
    delete [] ciphertext;
    delete [] AEAD;

    return 0;
}
